a classic backtracking problem. I'm trying to  partition the string where it's palindrome and keep goin from there .


class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        List<String> ds =  new ArrayList<>();
        solve(0, s, ans, ds);
        return ans;

    }
    void solve(int ind, String s, List<List<String>> ans, List<String> ds){
        if(ind == s.length()){
            ans.add(new ArrayList<>(ds));
            return;

        }
        for(int i=ind;i<s.length();i++){
            if(isPalindrome(s.substring(ind, i+1))){
                ds.add(s.substring(ind, i+1));
                solve(i+1, s, ans, ds);
                ds.remove(ds.size()-1);
            }
        }
    }
    boolean isPalindrome(String s){  
        int n = s.length();
        int i=0;
        int j = n-1;

        while(i<j){
            if(s.charAt(i)!= s.charAt(j)) return false;
            j--;
            i++;
        }
        return true;
    }
}