@Leetcode: 416

Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.
Example 1:
Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].



class Solution {
    public boolean canPartition(int[] nums) {
        int n = nums.length;
        int sum=0;
        for(int it: nums) sum+=it;
        if((sum&1)==1) return false;

        sum=sum/2;

        int[][] dp = new int[n][sum+1];
        for(int[] row: dp) Arrays.fill(row, -1);

        return partition(n-1, sum, nums, dp);
    }
    boolean partition(int ind, int sum, int[] nums, int[][] dp){
        if(sum==0) return true;
        if(ind==0) return nums[0]==sum;
        if(dp[ind][sum]!= -1) return dp[ind][sum]==1;

        // Not pick
        boolean notPick = partition(ind - 1, sum, nums, dp);

        // Pick (only if arr[ind] <= sum)
        boolean pick = false;
        if (nums[ind] <= sum) {
            pick = partition(ind - 1, sum - nums[ind],nums, dp);
        }

        dp[ind][sum] = (pick || notPick) ? 1 : 0;
        return dp[ind][sum] == 1;
    }
}
