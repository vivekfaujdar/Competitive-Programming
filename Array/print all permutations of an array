print all permutations of an array
Approach 1
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        int n = nums.length;
        permutations(nums, n, ans, new ArrayList<>(), new boolean[n]);
        return ans;

        
    }
    void permutations(int[] nums, int n, List<List<Integer>> ans, List<Integer> ds, boolean[] bool){
        if(ds.size()==n){
            ans.add(new ArrayList<>(ds));
            return;
        }

        for(int i=0; i<n;i++){
            if(bool[i]==false){
                ds.add(nums[i]);
                bool[i] = true;
                permutations(nums, n, ans, ds, bool);
                ds.remove(ds.size()-1);
                bool[i] = false;
            }
        }
    }
}
Approach 2 (without extra boolean space)
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        permutations(0, nums, nums.length, ans);
        return ans;

    }
    void permutations(int ind, int[] nums, int n, List<List<Integer>> ans){
        if(ind==n){
            ans.add(Arrays.stream(nums).boxed().collect(Collectors.toList()));
            return;
        }

        for(int i =ind;i<n;i++){
            swap(nums, ind,i);
            permutations(ind+1, nums,n, ans);
            swap(nums, ind, i);
        }
    }
    void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }
}
